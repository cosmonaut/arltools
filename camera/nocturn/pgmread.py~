import re
import numpy as np
import matplotlib.pyplot as mp
from matplotlib.colors import LogNorm
import sys





def read_noc_pgm(filename, byteorder = '<'):
    with open(filename, 'rb') as f:
        h1 = f.readline()
        h2 = f.readline()
        wh_vals = f.readline()

        wh_vals = wh_vals.decode("ASCII")
        wh_vals = wh_vals.strip('\r\n')
        wh_vals = wh_vals.split(' ')
        width = int(wh_vals[0])
        height = int(wh_vals[1])
        
        print(h1)
        print(h2)
        print("WIDTH: {0:d}".format(width))
        print("HEIGHT: {0:d}".format(height))

        # This is actually maxval (
        bpp = ""
        # For some reason maxval doesn't get a \n terminator in the
        # nocturn... wtf mate.
        while(True):
            #for i in range(10):
            c = f.read(1)
            if (c != b'\r'):
                bpp += str(chr(c[0]))
                #print(c)
                #print(c[0])
            else:
                break

        # Now we've got hot bpp action
        bpp = int(bpp)
        print("BPP: {0:d}".format(bpp))

        # remaining payload.
        pload = f.read()

        print(len(pload))

        # inform numpy of proper pixel format...
        if (bpp < 256):
            noc_dtype = '>u1'
        else:
            noc_dtype = '>u2'
        
        im = np.frombuffer(pload, dtype=noc_dtype, count = width*height).reshape((height, width))
            
        return(im)


def read_pgm(filename, byteorder='>'):
    """Return image data from a raw PGM file as numpy array.

    Format specification: http://netpbm.sourceforge.net/doc/pgm.html

    """
    with open(filename, 'rb') as f:
        #print(f.readline())
        #print(f.readline())
        #print(f.readline())
        #print(f.readline())
        #print(f.readline())

        
        buffer = f.read()
        print(buffer[0:100])
    try:
        header, width, height, maxval = re.search(
            b"(^P5\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n]\s)*)", buffer).groups()
    except AttributeError:
        raise ValueError("Not a raw PGM file: '%s'" % filename)
    return np.frombuffer(buffer,
                            dtype='u1' if int(maxval) < 256 else byteorder+'u2',
                            count=int(width)*int(height),
                            offset=len(header)
                            ).reshape((int(height), int(width)))


if __name__ == "__main__":
    # from matplotlib import pyplot
    # image = read_pgm("img_1386.pgm", byteorder='<')
    # pyplot.imshow(image, pyplot.cm.gray)
    # pyplot.show()

    if (len(sys.argv) < 2):
        print("need filename...")
        exit()

    fname = sys.argv[1]

    im = read_noc_pgm(fname)
    #mp.imshow(im, norm = LogNorm(vmin = 50))
    mp.imshow(im)
    mp.show()

    #mp.plot(im[30])
    #mp.show()

    mp.plot(im.sum(axis = 0))
    mp.plot(im.sum(axis = 1))
    mp.show()

    exit()
    
    mp.plot(im[256])
    mp.plot(im[257])
    mp.plot(im[258])
    mp.show()

    
    exit()

    mp.plot(im[52])
    mp.plot(im[53])
    mp.plot(im[54])
    mp.show()

    mp.plot(im[:,81])
    mp.plot(im[:,82])
    mp.plot(im[:,83])
    mp.show()

    
    # im = read_noc_pgm("img_1384.pgm")

    # mp.imshow(im)
    # mp.show()

    # mp.plot(im[82])
    # mp.show()
    
